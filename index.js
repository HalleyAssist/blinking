// Generated by CoffeeScript 1.11.1
(function() {
  var Promise, exports, fs;

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  Promise.config({
    cancellation: true
  });

  module.exports = exports = function(ledFile) {
    var blink, ledOff, ledOn;
    ledOn = function() {
      return fs.writeFileAsync(ledFile, 1);
    };
    ledOff = function() {
      return fs.writeFileAsync(ledFile, 0);
    };
    blink = function(ms) {
      if (ms == null) {
        ms = 200;
      }
      return ledOn().delay(ms).then(ledOff);
    };
    blink.pattern = (function() {
      var blinking, start;
      blinking = null;
      start = function(pattern) {
        var i, ref, results;
        return Promise.resolve((function() {
          results = [];
          for (var i = 0, ref = pattern.blinks; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this)).each(function() {
          return blink(pattern.onDuration).delay(pattern.offDuration);
        }).delay(pattern.pause).then(function() {
          return start(pattern);
        });
      };
      return {
        start: function(pattern) {
          var fullPattern, ref, ref1, ref2, ref3;
          if (pattern == null) {
            pattern = {};
          }
          if (blinking != null) {
            return false;
          }
          fullPattern = {
            blinks: (ref = pattern.blinks) != null ? ref : 1,
            onDuration: (ref1 = pattern.onDuration) != null ? ref1 : 200,
            offDuration: (ref2 = pattern.offDuration) != null ? ref2 : 200,
            pause: (ref3 = pattern.pause) != null ? ref3 : 0
          };
          blinking = start(fullPattern);
        },
        stop: function() {
          if (blinking == null) {
            return false;
          }
          blinking.cancel();
          ledOff();
          return blinking = null;
        }
      };
    })();
    return blink;
  };

}).call(this);
